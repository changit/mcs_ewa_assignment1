package org.iso8583.payload;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.6.1
 * 2013-01-17T22:01:42.170+05:30
 * Generated source version: 2.6.1
 * 
 */
@WebServiceClient(name = "CoreService", 
                  wsdlLocation = "http://54.235.192.119:8280/services/CoreService?wsdl",
                  targetNamespace = "http://iso8583.org/payload") 
public class CoreService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://iso8583.org/payload", "CoreService");
    public final static QName CoreServiceHttpsSoap12Endpoint = new QName("http://iso8583.org/payload", "CoreServiceHttpsSoap12Endpoint");
    public final static QName CoreServiceHttpsSoap11Endpoint = new QName("http://iso8583.org/payload", "CoreServiceHttpsSoap11Endpoint");
    public final static QName CoreServiceHttpsEndpoint = new QName("http://iso8583.org/payload", "CoreServiceHttpsEndpoint");
    public final static QName CoreServiceHttpSoap11Endpoint = new QName("http://iso8583.org/payload", "CoreServiceHttpSoap11Endpoint");
    public final static QName CoreServiceHttpEndpoint = new QName("http://iso8583.org/payload", "CoreServiceHttpEndpoint");
    public final static QName CoreServiceHttpSoap12Endpoint = new QName("http://iso8583.org/payload", "CoreServiceHttpSoap12Endpoint");
    static {
        URL url = null;
        try {
            url = new URL("http://54.235.192.119:8280/services/CoreService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(CoreService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://54.235.192.119:8280/services/CoreService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public CoreService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CoreService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CoreService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns CoreServicePortType
     */
    @WebEndpoint(name = "CoreServiceHttpsSoap12Endpoint")
    public CoreServicePortType getCoreServiceHttpsSoap12Endpoint() {
        return super.getPort(CoreServiceHttpsSoap12Endpoint, CoreServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CoreServicePortType
     */
    @WebEndpoint(name = "CoreServiceHttpsSoap12Endpoint")
    public CoreServicePortType getCoreServiceHttpsSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(CoreServiceHttpsSoap12Endpoint, CoreServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns CoreServicePortType
     */
    @WebEndpoint(name = "CoreServiceHttpsSoap11Endpoint")
    public CoreServicePortType getCoreServiceHttpsSoap11Endpoint() {
        return super.getPort(CoreServiceHttpsSoap11Endpoint, CoreServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CoreServicePortType
     */
    @WebEndpoint(name = "CoreServiceHttpsSoap11Endpoint")
    public CoreServicePortType getCoreServiceHttpsSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(CoreServiceHttpsSoap11Endpoint, CoreServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns CoreServicePortType
     */
    @WebEndpoint(name = "CoreServiceHttpsEndpoint")
    public CoreServicePortType getCoreServiceHttpsEndpoint() {
        return super.getPort(CoreServiceHttpsEndpoint, CoreServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CoreServicePortType
     */
    @WebEndpoint(name = "CoreServiceHttpsEndpoint")
    public CoreServicePortType getCoreServiceHttpsEndpoint(WebServiceFeature... features) {
        return super.getPort(CoreServiceHttpsEndpoint, CoreServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns CoreServicePortType
     */
    @WebEndpoint(name = "CoreServiceHttpSoap11Endpoint")
    public CoreServicePortType getCoreServiceHttpSoap11Endpoint() {
        return super.getPort(CoreServiceHttpSoap11Endpoint, CoreServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CoreServicePortType
     */
    @WebEndpoint(name = "CoreServiceHttpSoap11Endpoint")
    public CoreServicePortType getCoreServiceHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(CoreServiceHttpSoap11Endpoint, CoreServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns CoreServicePortType
     */
    @WebEndpoint(name = "CoreServiceHttpEndpoint")
    public CoreServicePortType getCoreServiceHttpEndpoint() {
        return super.getPort(CoreServiceHttpEndpoint, CoreServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CoreServicePortType
     */
    @WebEndpoint(name = "CoreServiceHttpEndpoint")
    public CoreServicePortType getCoreServiceHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(CoreServiceHttpEndpoint, CoreServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns CoreServicePortType
     */
    @WebEndpoint(name = "CoreServiceHttpSoap12Endpoint")
    public CoreServicePortType getCoreServiceHttpSoap12Endpoint() {
        return super.getPort(CoreServiceHttpSoap12Endpoint, CoreServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CoreServicePortType
     */
    @WebEndpoint(name = "CoreServiceHttpSoap12Endpoint")
    public CoreServicePortType getCoreServiceHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(CoreServiceHttpSoap12Endpoint, CoreServicePortType.class, features);
    }

}
